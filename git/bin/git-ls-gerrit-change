#!/usr/bin/env bash
#
# Print GerritHub changes.
#
#    $ git rebase -i ${gerrithub/master}
#    $ git ls-changes ${gerrithub}
#    91970d6580b31a7cb0892e2e805821b660bchoge       refs/changes/yy/zzzzzz/1
#    364989936441ecea7063a2ba19320c139030hoge       refs/changes/yy/zzzzzz/2    <=latest change
#    9b54310ee03363de433ca79bb5f523ac2f52hoge       refs/changes/yy/zzzzzz/meta
#    $ git fetch ${gerrithub} ${refs/changes/yy/zzzzzz/2}
#    $ git diff HEAD FETCH_HEAD | tee ~/a.patch   <=check diff(コミットメッセージの差分はこれでは確認できないので注意)
#    $ patch -p1 < ~/a.patch
#    $ git add -p
#    $ git commit --amend -C HEAD
#    $ git rebase --continue
#
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

if [ $# -lt 1 ]; then
	echo "`basename $0` <gerrithub_url>" >&2
	exit 1
fi
gerrithub_url=$1

#
# function
#
change_number2=
change_number4=
find_change_number()
{
	local ls=$1
	local chg_id=$2

	change_number2=
	change_number4=

	local refs_changes=`echo "$ls" | grep refs/changes`
	while read hash refs
	do
		# match change id
		local log=`git cat-file -p $hash 2>/dev/null`
		echo "$log" | grep "Change-Id:" | tail -1 | grep -q "$chg_id"
		if [ $? -ne 0 ]; then
			continue
		fi
		# get change number
		change_number2=`echo $refs | awk -F/ '{print $3}'`
		change_number4=`echo $refs | awk -F/ '{print $4}'`
		break
	done <<EOF
$refs_changes
EOF
}

patchset_number=0
latest_patchset_number()
{
	local ls=$1
	local chg2=$2
	local chg4=$3

	patchset_number=-1

	local changes=`echo "$ls" | grep "refs/changes/$chg2/$chg4"`
	while read hash refs
	do
		# get patchset number
		local patchset=`echo $refs | awk -F/ '{print $5}'`

		# str to num
		patchset=$(($patchset))
		if [ $patchset -le 0 ]; then
			continue
		fi

		# compare
		if [ $patchset_number -lt $patchset ]; then
			patchset_number=$patchset
		fi
	done <<EOF
$changes
EOF
}

#
# main
#
ls_remote=`git ls-remote $gerrithub_url`
if [ $? -ne 0 ]; then
	echo "ls-remote failed." >&2
	exit 1
fi

change_id=`git log -1 | grep "Change-Id:" | tail -1 | sed 's|Change-Id:||g' | xargs`
if [ -z "$change_id" ]; then
	echo "chenge id not found." >&2
	exit 1
fi

find_change_number "$ls_remote" "$change_id"
if [ -z "$change_number2" -o -z "$change_number4" ]; then
	echo "change number not found." >&2
	git rebase --continue &>/dev/null
	exit 1
fi
echo "$ls_remote" | grep "refs/changes/$change_number2/$change_number4"


#latest_patchset_number "$ls_remote" "$change_number2" "$change_number4"
#if [ $patchset_number -lt 0 ]; then
#	echo "patchset number not found." >&2
#	exit 1
#fi
#latest_refs="refs/changes/$change_number2/$change_number4/$patchset_number"
